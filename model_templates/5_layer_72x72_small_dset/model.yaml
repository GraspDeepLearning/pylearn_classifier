!obj:pylearn2.train.Train {
    dataset: &train !obj:datasets.rgbd_hdf5_dataset.RGBD_HDF5_Dataset {
        topo_view_key: 'rgbd',
        y_key: 'grasp_type',
        hdf5_filepath: %(train_dataset)s,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: %(batch_size)i,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [72, 72],
            num_channels: %(num_input_channels)i,
            axes: ['c', 0, 1, 'b'],
        },
        layers: [!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h0',
                     output_channels: %(output_channels_h0)i,
                     irange: .05,
                     kernel_shape: [11, 11],
                     kernel_stride: [2, 2],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     tied_b: True,
                     W_lr_scale: 10.0,
                 },!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h1',
                     output_channels: %(output_channels_h1)i,
                     irange: .05,
                     kernel_shape: [3, 3],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     tied_b: True,
                 },!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h2',
                     output_channels: %(output_channels_h2)i,
                     irange: .05,
                     kernel_shape: [3, 3],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     tied_b: True,
                 },!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h3',
                     output_channels: %(output_channels_h3)i,
                     irange: .05,
                     kernel_shape: [3, 3],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     tied_b: True,
                 },!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h4',
                     output_channels: %(output_channels_h4)i,
                     irange: .05,
                     kernel_shape: [3, 3],
                     tied_b: True,
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                 },!obj:pylearn2.models.mlp.Linear {
                    layer_name: 'y0',
                    dim: 1000,
                    irange: .05,
                 },
                 !obj:pylearn2.models.mlp.Linear {
                    layer_name: 'y1',
                    dim: 100,
                    irange: .05,
                 },
                 !obj:pylearn2.models.mlp.Linear {
                    layer_name: 'y2',
                    dim: %(num_output_channels)i,
                    irange: .05,
                 }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: %(batch_size)i,
        learning_rate: 0.1,
        batches_per_iter: 5,
        monitoring_batch_size: 2,
        monitoring_batches: 5,
        monitoring_dataset:
            {
                 'valid' : !obj:datasets.rgbd_hdf5_dataset.RGBD_HDF5_Dataset {
                                topo_view_key: 'rgbd',
                                y_key: 'grasp_type',
                                hdf5_filepath: %(valid_dataset)s,
            },
                 'test' : !obj:datasets.rgbd_hdf5_dataset.RGBD_HDF5_Dataset {
                                topo_view_key: 'rgbd',
                                y_key: 'grasp_type',
                                hdf5_filepath: %(test_dataset)s,
            }
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.cost.MethodCost {
                    method: 'cost_from_X'
                },!obj:pylearn2.costs.mlp.L1WeightDecay {
                        coeffs: [ 0.0000000005,
                                  0.0000000005,
                                  0.0000000005,
                                  0.0000000005,
                                  0.0000000005,
                                  0.0000000005,
                                  0.0000000005,
                                  0.0000000005]
                }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: %(max_epochs)i
                },
            ]
        },

    },
    extensions:
        [!obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_objective',
             save_path: "%(save_path)s/best_valid_objective_model.pkl"
        },
        !obj:train_extensions.RecordWeights {
            save_path: "%(save_path)s/weights/"
        },
        !obj:train_extensions.RecordCurrentModel {
            save_path: "%(save_path)s/current_model.pkl"
        }

    ]
}
